#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This is python code for tweepy streamer without using Cursor. This code is generated by Vinnie who runs
LucidProgramming in Youtube.

Unmodified code source:
https://github.com/vprusso/youtube_tutorials/tree/master/twitter_python
"""

# Libraries
from os import path
import json
from pandas.io.json import json_normalize
import pandas
import twitter_credentials


from textblob import TextBlob
import re


from tweepy.streaming import StreamListener
from tweepy import OAuthHandler
from tweepy import Stream


# # # # TWITTER AUTHENTICATER # # # #
class TwitterAuthenticator():

    def authenticate_twitter_app(self):
        auth = OAuthHandler(twitter_credentials.CONSUMER_KEY, twitter_credentials.CONSUMER_SECRET)
        auth.set_access_token(twitter_credentials.ACCESS_TOKEN, twitter_credentials.ACCESS_TOKEN_SECRET)
        return auth


# # # # TWITTER STREAMER # # # #
class TwitterStreamer():
    """
    Class for streaming and processing live tweets.
    """

    def __init__(self):
        self.twitter_authenticator = TwitterAuthenticator()

    def stream_tweets(self, fetched_tweets_filename, hash_tag_list):

        # This handles Twitter authentication and the connection to the Twitter Streaming API.
        listener = TwitterListener(fetched_tweets_filename)
        auth = self.twitter_authenticator.authenticate_twitter_app()
        stream = Stream(auth, listener)

        stream.filter(track=hash_tag_list)


# # # # TWITTER STREAM LISTNER # # # #
class TwitterListener(StreamListener):
    """
    This is a basic listener class that just prints received tweets to stdout.
    """

    def __init__(self, fetched_tweets_filename):
        self.fetched_tweets_filename = fetched_tweets_filename

    def on_data(self, data):
        try:
            # excluding retweets in tweet output
            decoded = json.loads(data)

            # RT indicates retweet, this section omits those tweets
            if not decoded['text'].startswith('RT'):
                print(data)  # printing complete tweets containing hash_tag_list in console for checking
                # columns to capture
                headers = ['created_at', 'user.screen_name', 'lang', 'text', 'sentiment']

                # No need to append to JSON - not really viable for appending
                # Convert captured data and append to CSV as needed
                with open(output_file, 'a') as f_output:
                    # Flatten captured JSON
                    decoded_res = json_normalize(decoded, max_level = 1)

                    # Check if CSV file already exists
                    # If it does, then append without headers
                    #try:
                    if not path.exists('tweets.csv'):
                        existing_file = pandas.read_csv(output_file)
                        # sentiment analysis
                        # remove mentions, special characters, and unwanted characters from tweet
                        tweet = str(decoded_res['text'])
                        tweet = ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", tweet).split())
                        #  Analyze the tweet's polarity
                        s = TextBlob(tweet)
                        if s.sentiment.polarity > 0:
                            snt = 'positive'
                        elif s.sentiment.polarity == 0:
                            snt = 'neutral'
                        else:
                            snt = 'negative'

                        # add sentiment column to data frame
                        decoded_res['sentiment'] = snt
                        #output data frame values to CSV without headers
                        decoded_res.to_csv(output_file, mode='a', columns = headers, header=False, index = False)

                    # Empty data exception - file does not exist yet
                    # Create CSV and include headers!
                    else:
                        # remove mentions, special characters  from tweet
                        tweet = str(decoded_res['text'])
                        tweet = ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", tweet).split())
                        # Analyze the tweet
                        s = TextBlob(tweet)
                        if s.sentiment.polarity > 0:
                            snt = 'positive'
                        elif s.sentiment.polarity == 0:
                            snt = 'neutral'
                        else:
                            snt = 'negative'

                        # add sentiment column
                        decoded_res['sentiment'] = snt
                        # output data frame values to CSV file with headers
                        decoded_res.to_csv(output_file, columns = headers, header = True, index = False)

            return True
        except BaseException as e:
            print("Error on_data: %s" % str(e))
        return True

    def on_error(self, status):
        if status == 420:
            # Returning False on_data method in case rate limit occurs.
            return False
        print(status)





if __name__ == "__main__":
    # hashtags need '#' added
    hash_tag_list = ["#flu", "#influenza", "#flushot", "#fluvaccine", "#sneeze"]
    fetched_tweets_filename = "tweets2.json"
    output_file = 'tweets.csv'

    twitter_streamer = TwitterStreamer()
    twitter_streamer.stream_tweets(fetched_tweets_filename, hash_tag_list)